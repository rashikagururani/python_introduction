'''

In Part B, you had a chance to explore how both the percentage of your salary that you save each month and
your annual raise affect how long it takes you to save for a down payment. This is nice, but suppose you 
want to set a particular goal, e.g. to be able to afford the down payment in three years. How much should
you save each month to achieve this? In this problem, you are going to write a program to answer that question. 
To simplify things, assume: 

1.Your semiannual raise is .07 (7%) 
2.Your investments have an annual return of 0.04 (4%) 
3.The down payment is 0.25 (25%) of the cost of the house 
4.The cost of the house that you are saving for is $1M. 

You are now going to try to find the best rate of savings to achieve a down payment on a $1M house in 36 months. 
Since hitting this exactly is a challenge, we simply want your savings to be within $100 of the required down payment. 

In ps1c.py , write a program to calculate the best savings rate, as a function of your starting salary. You should use bisection 
search to help you do this efficiently. You should keep track of the number of steps it takes your bisections search to finish. 
You should be able to reuse some of the code you wrote for part B in this problem. Because we are searching for a value that is
in principle a float, we are going to limit ourselves to two decimals of accuracy (i.e., we may want to save at 7.04% or 0.0704
in decimal â€“ but we are not going to worry about the difference between 7.041% and 7.039%). This means we can search for an integer
between 0 and 10000 (using integer division), and then convert it to a decimal percentage (using float division) to use when we 
are calculating the current_savings after 36 months. By using this range, there are only a finite number of numbers that we are 
searching over, as opposed to the infinite number of decimals between 0 and 1. This range will help prevent infinite loops.
The reason we use 0 to 10000 is to account for two additional decimal places in the range 0% to 100%. Your code should print 
out a decimal (e.g. 0.0704 for 7.04%). Try different inputs for your starting salary, and see how the percentage you need to 
save changes to reach your desired down payment. Also keep in mind it may not be possible for to save a down payment in a year
and a half for some salaries. In this case your function should notify the user that it is not possible to save for the down 
payment in 36 months with a print statement.

'''

annual_salary = float(input('Your annual salaray (in $):'))

house_cost = 1000000 #$1M
semi_annual_raise = 0.07 #7%
annual_return = 0.04 #4%
down_paymnet = 0.25*house_cost
time = 36 #36 months = 3 years
#monthly_salary = annual_salary/12
num_guess =0
low = 0
high = 10000
months = 0
guess_portion_saved = (low+high)//2
epsilon=100
num_step=0
portion_saved_for_down_payment=0
print('down payment =$',down_paymnet)
savings=0
while abs(savings-down_paymnet) >= epsilon:
    #print('low =',low,'high =',high,'guess =',guess_portion_saved)
    rate = guess_portion_saved/10000
    savings=0
    temp_annual_salary = annual_salary
    for months in range(1,37):
        
        if(months%6==0 and months>0):
            temp_annual_salary += semi_annual_raise*temp_annual_salary
            #print('monthly salary:',monthly_salary)
        
        #num_step +=1
        monthly_salary = temp_annual_salary/12
        savings += rate * monthly_salary + savings * annual_return/12
        
        #print('savings:',savings)
        months+=1
        #print(num_step) 

    if(savings<down_paymnet):
        low = guess_portion_saved
    
    else:
        high = guess_portion_saved
    
    num_guess+=1
    guess_portion_saved= (low+high)//2
    
    if (num_guess>13):
        break

if (num_guess>13):
    print('You can\'t complete the down payment.')
else:
    print('Best saving rate:',rate)
    print('Steps taken in bisection',num_guess)
